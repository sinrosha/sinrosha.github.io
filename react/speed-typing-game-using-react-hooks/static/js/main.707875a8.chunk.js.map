{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","timeRemaining","setTimeRemaining","isTimeRunning","setTimeRunning","wordCount","setWordCount","text","setText","textRef","useRef","endGame","filteredArr","trim","split","filter","word","length","calculateWordCount","useEffect","setTimeout","time","value","onPaste","e","preventDefault","onChange","target","disabled","ref","onClick","current","focus","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAoEeA,MAjEf,WACE,IADa,EAE6BC,mBADlB,IADX,mBAENC,EAFM,KAESC,EAFT,OAG2BF,oBAAS,GAHpC,mBAGNG,EAHM,KAGSC,EAHT,OAIqBJ,mBAAS,GAJ9B,mBAINK,EAJM,KAIKC,EAJL,OAKWN,mBAAS,IALpB,mBAKNO,EALM,KAKAC,EALA,KAMPC,EAAUC,iBAAO,MAsBvB,SAASC,IACPP,GAAe,GAZjB,SAA4BG,GACxB,IACMK,EADWL,EAAKM,OAAOC,MAAM,KACNC,QAAQ,SAAAC,GAAI,MAAa,KAATA,KACtCV,EAAaM,EAAYK,QAUlCC,CAAmBX,GAarB,OAVAY,qBAAW,WACNlB,EAAgB,GAAKE,EACtBiB,YAAY,WACVlB,GAAkB,SAAAmB,GAAI,OAAIA,EAAO,OAChC,KACwB,IAAlBpB,GACTU,MAED,CAACV,EAAeE,IAGjB,6BACE,qDACA,8BACEmB,MAAOf,EACPgB,QAAU,SAACC,GAAD,OAAOA,EAAEC,kBACnBC,SA1BN,SAAsBF,GAAI,IACfF,EAASE,EAAEG,OAAXL,MACPd,EAAQc,IAyBNM,UAAWzB,EACX0B,IAAKpB,IAEP,+CAAqBR,GACrB,4BACE6B,QA/CN,WACE1B,GAAe,GACfE,EAAa,GACbJ,EAVsB,IAWtBO,EAAQsB,QAAQH,UAAW,EAC3BnB,EAAQsB,QAAQC,QAChBxB,EAAQ,KA0CJoB,SAAUzB,GAFZ,SAMCE,EAAY,GAAM,2CAAiBA,KCnDtB4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.707875a8.chunk.js","sourcesContent":["import React, {useState, useEffect, useRef} from 'react'\nimport './App.css'\n\nfunction App() {\n  const COUNT_DOWN_TIME = 30\n  const [timeRemaining, setTimeRemaining] = useState(COUNT_DOWN_TIME)\n  const [isTimeRunning, setTimeRunning] = useState(false)\n  const [wordCount, setWordCount] = useState(0)\n  const [text, setText] = useState(\"\")\n  const textRef = useRef(null)\n\n  function startGame() {\n    setTimeRunning(true)\n    setWordCount(0)\n    setTimeRemaining(COUNT_DOWN_TIME)\n    textRef.current.disabled = false\n    textRef.current.focus()\n    setText(\"\")\n  }\n\n  function calculateWordCount(text) {\n      const wordsArr = text.trim().split(\" \")\n      const filteredArr = wordsArr.filter( word => word !== \"\") \n      return setWordCount(filteredArr.length)\n  }\n\n  function handleChange(e) {\n      const {value} = e.target\n      setText(value)\n  }\n\n  function endGame() {\n    setTimeRunning(false)\n    calculateWordCount(text)\n  }\n\n  useEffect( () => {\n    if(timeRemaining > 0 && isTimeRunning) {\n      setTimeout( () => {\n        setTimeRemaining( time => time - 1)\n      }, 1000)\n    } else if( timeRemaining === 0 ) {\n      endGame()\n    }\n  }, [timeRemaining, isTimeRunning])\n\n  return ( \n    <div>\n      <h1>How fast do you type?</h1>\n      <textarea\n        value={text}\n        onPaste={ (e) => e.preventDefault()}\n        onChange={handleChange}\n        disabled={!isTimeRunning}\n        ref={textRef}\n      />\n      <h4>Time remaining: {timeRemaining}</h4>\n      <button \n        onClick={startGame}\n        disabled={isTimeRunning}\n      >\n        Start\n      </button>\n      {wordCount > 0  && <h1>Word count: {wordCount}</h1>}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n); \n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}